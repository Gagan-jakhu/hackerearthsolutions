/*
You are given a stack of N integers. In one operation, you can either pop an element from the stack or push any popped element into the
stack. You need to maximize the top element of the stack after performing exactly K operations. If the stack becomes empty after performing
K operations and there is no other way for the stack to be non-empty, print -1.

  

Input format :

The first line of input consists of two space-separated integers N and K.
The second line of input consists N space-separated integers denoting the elements of the stack. The first element represents the top of the 
stack and the last element represents the bottom of the stack.
Output format :

Print the maximum possible top element of the stack after performing exactly K operations.
Constraints : 

1≤N≤2∗106
1≤Ai≤1018
1≤K≤109
SAMPLE INPUT 
6 4
1 2 4 3 3 5
SAMPLE OUTPUT 
4
*/





#include <bits/stdc++.h>
using namespace std;

int main()
{
    long long n,k; cin>>n>>k; long long a[n],i;
   // stack<int> s;
    for(i=0;i<n;i++)
    {
        cin>>a[i];
        //s.push(a[i]);
    }
    if((n==1) && (k%2==1)) cout<<"-1";
    else if(k==n) cout<<*max_element(a,a+n-1);
    else if(k<n)
    {
    long long m=*max_element(a,a+k-1);
    if(m>a[k])  cout<<m;
    else cout<<a[k];
    }
    else
    {
        cout<<*max_element(a,a+n);
    }
    
    
}
